// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

// Admin User Model for authentication
model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String // This will store the hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

// Newsletter Subscriber Model
model NewsletterSubscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // We'll track if they're active in case they want to unsubscribe later
  active    Boolean  @default(true)

  @@map("newsletter_subscribers")
}

// User Model
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String
  phoneNumber String
  email       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  orders Order[]

  @@map("users")
}

// Ticket Type Model (for different ticket categories)
model TicketType {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String // e.g., "Solo Vibes", "Geng Energy"
  price       Int // Base price in kobo/cents
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  orderItems OrderItem[]

  @@map("ticket_types")
}

// Order Model (represents a checkout session)
model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Custom Order ID for customer reference (e.g., "ORD-2025-001")
  orderId String @unique

  // User Information
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  // Order Details
  subtotal      Int // Total before fees (in kobo/cents)
  processingFee Int // Processing fee (in kobo/cents)
  total         Int // Final total (in kobo/cents)

  // Order Status
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  isActive      Boolean       @default(true) // Ticket activation status - becomes false when used

  // Event Information
  eventName     String @default("shutupnraveee 2025")
  eventDate     String @default("November 29, 2025")
  eventTime     String @default("12:00 PM - 10:00 PM")
  eventLocation String @default("Port Harcourt, Nigeria")

  // QR Code Information
  qrCodeUrl String? // Cloudinary URL for QR code image

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orderItems OrderItem[]

  @@map("orders")
}

// Order Item Model (individual tickets in an order)
model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Order relationship
  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id])

  // Ticket Type relationship
  ticketTypeId String     @db.ObjectId
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])

  // Item details
  quantity   Int
  unitPrice  Int // Price per ticket at time of purchase (in kobo/cents)
  totalPrice Int // quantity * unitPrice (in kobo/cents)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

// Enums for order status
enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// DJ Application Model
model DjApplication {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  fullName         String
  phoneNumber      String
  instagramHandle  String              @unique
  mixLink          String
  status           DJApplicationStatus @default(PENDING)
  submittedAt      DateTime            @default(now())
  reviewedAt       DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@map("dj_applications")
}

// Enum for DJ application status
enum DJApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

// Volunteer Application Model
model VolunteerApplication {
  id          String                     @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String
  phoneNumber String
  gender      Gender
  role        VolunteerRole
  status      VolunteerApplicationStatus @default(PENDING)
  submittedAt DateTime                   @default(now())
  reviewedAt  DateTime?
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt

  @@map("volunteer_applications")
}

// Enum for gender
enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

// Enum for volunteer roles
enum VolunteerRole {
  LOGISTICS_SETUP
  ASSISTANCE
  SOCIAL_MEDIA_SUPPORT
  TECH_SUPPORT_STAGE_MANAGEMENT
  CONTENT_CREATION
  GUEST_REGISTRATION_TICKETING
  CROWD_CONTROL
  SALES_MARKETING
  OFFLINE_PUBLICITY
  MEDICALS
  GAMES
  PR_TEAM
}

// Enum for volunteer application status
enum VolunteerApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}
